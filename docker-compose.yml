services:
  keycloak:
    image: keycloak/keycloak:latest
    container_name: keycloak
    depends_on:
      - keycloak-postgres
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://host.docker.internal:5440/keycloak-postgres
      KC_DB_USERNAME: admin
      KC_DB_PASSWORD: admin

      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false

      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8095:8080"
    command: "start-dev"

  keycloak-postgres:
    image: 'postgres:latest'
    container_name: keycloak-postgres
    environment:
      POSTGRES_DB: keycloak-postgres
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5440:5432"
    volumes:
      - keycloak-postgres-volume:/var/lib/postgresql/data

  eureka-server:
    image: 'eureka-server:latest'
    build:
      context: eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"

  api-gateway:
    image: 'api-gateway:latest'
    build:
      context: api-gateway
      dockerfile: Dockerfile
    depends_on:
      - eureka-server
    ports:
      - "8090:8080"

  ticket-service:
    image: 'ticket-service:latest'
    build:
      context: ticket-service
      dockerfile: Dockerfile
    depends_on:
      - eureka-server
    environment:
      DATABASE_URL: jdbc:postgresql://host.docker.internal:5432/ticket-service
      DATABASE_USERNAME: admin
      DATABASE_PASSWORD: admin
    ports:
      - "8091:8080"

  postgres-service-db:
    image: 'postgres:latest'
    container_name: postgres-service-db
    environment:
      POSTGRES_DB: postgres-service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres-service-volume:/var/lib/postgresql/data

#  account-service-db:
#    image: 'postgres:latest'
#    container_name: account-service-db
#    environment:
#      POSTGRES_DB: account-service
#      POSTGRES_USER: admin
#      POSTGRES_PASSWORD: admin
#    ports:
#      - "5432:5432"
#    volumes:
#      - account-service-volume:/var/lib/postgresql/data

#  authentication-server-db:
#    image: 'postgres:latest'
#    container_name: authentication-server-db
#    environment:
#      POSTGRES_DB: authentication-server
#      POSTGRES_USER: admin
#      POSTGRES_PASSWORD: admin
#    ports:
#      - "5433:5432"
#    volumes:
#      - authentication-server-volume:/var/lib/postgresql/data

  authentication-server:
    image: 'authentication-server:latest'
    build:
      context: authentication-server
      dockerfile: Dockerfile
    depends_on:
      - eureka-server
    environment:
      DATABASE_URL: jdbc:postgresql://host.docker.internal:5433/authentication-server
      DATABASE_USERNAME: admin
      DATABASE_PASSWORD: admin
    ports:
      - "8092:8080"

  config-service:
    image: 'config-service:latest'
    build:
      context: config-service
      dockerfile: Dockerfile
    ports:
      - "9999:8080"



  #  order-service:
  #    image: 'order-service:latest'
  #    build:
  #      context: order-service
  #      dockerfile: Dockerfile
  #    depends_on:
  #      - order-service-db
  #      - service-discovery
  #      - api-gateway
  #    environment:
  #      DATABASE_URL: jdbc:postgresql://host.docker.internal:5433/order-service
  #      DATABASE_USERNAME: admin
  #      DATABASE_PASSWORD: admin
  #    ports:
  #      - "8092:8080"

#    order-service-db:
#      image: 'postgres:alpine3.19'
#      container_name: order-service-db
#      environment:
#        POSTGRES_DB: order-service
#        POSTGRES_USER: admin
#        POSTGRES_PASSWORD: admin
#      ports:
#        - "5433:5432"
#      volumes:
#        - order-service-volume:/var/lib/postgresql/data

  #  payment-service:
  #    image: 'payment-service:latest'
  #    build:
  #      context: payment-service
  #      dockerfile: Dockerfile
  #    depends_on:
  #      - service-discovery
  #      - api-gateway
  #    ports:
  #      - "8093:8080"

  kafka:
    image: confluentinc/cp-kafka:latest
    restart: always
    ports:
      - "29092:29092"
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_NODE_ID: 1
      CLUSTER_ID: byFhzt9zR1WMkgC62lQ8hA
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://kafka:9093
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5
    labels:
      amplicode.image: confluent/kafka
  kafkaui:
    image: provectuslabs/kafka-ui:latest
    restart: always
    ports:
      - "8989:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: byFhzt9zR1WMkgC62lQ8hA
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit -1
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 5

#  vault:
#    image: hashicorp/vault:latest
#    container_name: vault
#    cap_add:
#      - IPC_LOCK
#    ports:
#      - "8200:8200"
#    environment:
#      - VAULT_DEV_ROOT_TOKEN_ID=root
#    volumes:
#      - ./vault-config:/vault/config
#      - vault-data:/vault/file
#    restart: unless-stopped


volumes:
  postgres-service-volume:
    name: postgres-service-volume
  authentication-server-volume:
    name: authentication-server-volume
  account-service-volume:
    name: account-service-volume
  keycloak-postgres-volume:
    name: keycloak-postgres-volume
  vault-data:
    driver: local
  kafka_data: